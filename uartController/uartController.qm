<?xml version="1.0" encoding="UTF-8"?>
<model version="3.2.2">
 <framework name="qpcpp"/>
 <package name="Controller" stereotype="0x00">
  <class name="UartController" superclass="qpcpp::QMsm">
   <attribute name="output" type="List &lt;char*&gt;" visibility="0x02" properties="0x00"/>
   <attribute name="input" type="List &lt;char&gt;" visibility="0x02" properties="0x00"/>
   <attribute name="owner" type="QP::QMActive&amp;" visibility="0x02" properties="0x00"/>
   <attribute name="isInDebugMode" type="bool" visibility="0x02" properties="0x00"/>
   <attribute name="speed" type="UartSpeed" visibility="0x02" properties="0x00"/>
   <operation name="UartController" type="QMsm(Q_STATE_CAST(&amp;UartController::initial)), owner(own), isInDebugMode(false), speed(SPEED_115200)" visibility="0x00" properties="0x00">
    <parameter name="own" type="QP::QMActive&amp;"/>
    <code>//</code>
   </operation>
   <operation name="~UartController" type="" visibility="0x00" properties="0x04">
    <code>//</code>
   </operation>
   <operation name="sendData" type="bool" visibility="0x02" properties="0x14">
    <parameter name="buff" type="const char *"/>
   </operation>
   <operation name="onReception" type="void" visibility="0x00" properties="0x14">
    <documentation>empty method</documentation>
    <parameter name="character" type="const char&amp;"/>
   </operation>
   <operation name="debugTrace" type="void" visibility="0x02" properties="0x00">
    <parameter name="fmt" type="const char *__restrict"/>
    <parameter name="" type="..."/>
    <code>if (isInDebugMode) {
    va_list args;
    va_start (args, fmt);
    BSP::system.debugTraceSync(fmt, args);
    va_end (args);
}</code>
   </operation>
   <operation name="setDebugMode" type="void" visibility="0x00" properties="0x00">
    <parameter name="state" type="bool"/>
    <code>isInDebugMode = state;</code>
   </operation>
   <operation name="getSpeed" type="UartSpeed&amp;" visibility="0x00" properties="0x00">
    <code>return speed;</code>
   </operation>
   <operation name="setSpeed" type="void" visibility="0x00" properties="0x00">
    <parameter name="speed" type="UartSpeed"/>
    <code>this-&gt;speed = speed;
reconfigure();</code>
   </operation>
   <operation name="reconfigure" type="void" visibility="0x02" properties="0x14"/>
   <statechart>
    <initial target="../1/3">
     <action>(void)e; // supress warning
me-&gt;debugTrace(&quot;UC: initial Transition&quot;);</action>
     <initial_glyph conn="5,6,5,0,44,16">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="WorkingState">
     <entry>me-&gt;debugTrace(&quot;UC: WorkingState entry&quot;);</entry>
     <exit>me-&gt;debugTrace(&quot;UC: WorkingState exit&quot;);</exit>
     <tran trig="RECV_NEW">
      <action>const QP::DataEvt *const recieved = static_cast&lt;const QP::DataEvt*const&gt;(e);</action>
      <choice>
       <guard brief="terminator">(recieved-&gt;charachter == newLine) || (recieved-&gt;charachter == carretReturn)</guard>
       <action>QP::DataEvt *evt = Q_NEW(QP::DataEvt, DT::NEW_BUFFERED_STRING_SIG);
char *buff = evt-&gt;string = (char *)malloc(me-&gt;input.length()+1);
while (!me-&gt;input.isEmpty()) {
    *buff++ = me-&gt;input.get();
}
*buff = '\0';
me-&gt;owner.post_( evt, 0);</action>
       <choice_glyph conn="76,66,5,-1,-13">
        <action box="-13,0,10,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard brief="wait for new data">else</guard>
       <action>const QP::DataEvt *const recieved = static_cast&lt;const QP::DataEvt*const&gt;(e);
me-&gt;input.add(recieved-&gt;charachter);</action>
       <choice_glyph conn="76,66,5,-1,7">
        <action box="2,0,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="76,78,2,-1,-12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="IDLE_DETECTED">
      <tran_glyph conn="88,78,2,-1,-12">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SEND_NEW" target="../4">
      <action>me-&gt;debugTrace(&quot;UC: SEND_NEW_SIG&quot;);
const QP::DataEvt *const evt = static_cast&lt;const QP::DataEvt *const&gt;(e);
me-&gt;sendData(evt-&gt;string);</action>
      <tran_glyph conn="79,15,0,3,13,14">
       <action box="0,2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="idleState">
      <entry>me-&gt;debugTrace(&quot;UC: idleState entry&quot;);</entry>
      <exit>me-&gt;debugTrace(&quot;UC: idleState exit&quot;);</exit>
      <state_glyph node="18,22,41,45">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="sendingState">
      <entry>me-&gt;debugTrace(&quot;UC: sendingState entry&quot;);</entry>
      <exit>me-&gt;debugTrace(&quot;UC: sendingState exit&quot;);</exit>
      <tran trig="SEND_SUCESSFULL">
       <action>me-&gt;debugTrace(&quot;UC: SEND_SUCESSFULL_SIG&quot;);</action>
       <choice target="../../../3">
        <guard brief="Empty">me-&gt;output.isEmpty()</guard>
        <choice_glyph conn="76,42,5,1,-17">
         <action box="-14,-2,14,2"/>
        </choice_glyph>
       </choice>
       <choice target="../..">
        <guard brief="Next">else</guard>
        <action>char *data = me-&gt;output.get();
me-&gt;sendData(data);</action>
        <choice_glyph conn="76,42,4,3,9,17">
         <action box="1,2,7,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="93,42,3,-1,-17">
        <action box="-14,-2,15,2"/>
       </tran_glyph>
      </tran>
      <tran trig="SEND_NEW">
       <action>me-&gt;debugTrace(&quot;UC: SEND_NEW_SIG. Just Consume&quot;);
QP::DataEvt *evt = (QP::DataEvt*)e;
me-&gt;output.add(evt-&gt;string);</action>
       <tran_glyph conn="93,31,3,-1,15">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="93,22,34,45">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="12,15,120,63">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="141,104"/>
   </statechart>
  </class>
  <directory name=".">
   <file name="UartController.h">
    <text>#ifndef UARTCONTROLLER_H
#define UARTCONTROLLER_H

#include &quot;qp_port.h&quot;
#include &quot;list.h&quot;

namespace UC {

enum UartSignals {
    RECV_NEW_SIG = QP::Q_USER_SIG,
    SEND_NEW_SIG,
    IDLE_DETECTED_SIG,
    SEND_SUCESSFULL_SIG,
    MAX_PUB_SIG
};

enum UartSpeed {
    SPEED_9600,
    SPEED_115200
};

$declare(Controller::UartController)

}

#endif // BATTERYCONTROLLER_H</text>
   </file>
   <file name="UartController.cpp">
    <text>#include &quot;qp_port.h&quot;
#include &quot;UartController.h&quot;
#include &lt;stdint.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;stdlib.h&gt;
#include &quot;BoardSupportPackage.h&quot;
#include &quot;myEvents.h&quot;
#include &quot;DebugTracer.h&quot;

namespace UC {

static const char newLine = '\n';
static const char carretReturn = '\r';

$define(Controller::UartController)

}</text>
   </file>
  </directory>
 </package>
</model>
