//****************************************************************************
// Model: uartController.qm
// File:  ./UartController.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${Controller::.::UartController.h} .........................................
#ifndef UARTCONTROLLER_H
#define UARTCONTROLLER_H

#include "qp_port.h"
#include "list.h"

namespace UC {

enum UartSignals {
    RECV_NEW_SIG = QP::Q_USER_SIG,
    SEND_NEW_SIG,
    IDLE_DETECTED_SIG,
    SEND_SUCESSFULL_SIG,
    MAX_PUB_SIG
};

//${Controller::UartController} ..............................................
class UartController : public QP::QMsm {
private:
    List <char*> output;
    List <char> input;
    QP::QMActive& owner;
    bool isInDebugMode;

public:
    UartController(QP::QMActive& own);
    virtual ~UartController();

private:
    virtual bool sendData(const char * buff) = 0;

public:
    virtual void onReception(const char& character) = 0;

private:
    void debugTrace(const char *__restrict fmt, ... );

public:
    void setDebugMode(bool state);

protected:
    static QP::QState initial(UartController * const me, QP::QEvt const * const e);
    static QP::QState WorkingState  (UartController * const me, QP::QEvt const * const e);
    static QP::QState WorkingState_e(UartController * const me);
    static QP::QState WorkingState_x(UartController * const me);
    static QP::QMState const WorkingState_s;
    static QP::QState idleState  (UartController * const me, QP::QEvt const * const e);
    static QP::QState idleState_e(UartController * const me);
    static QP::QState idleState_x(UartController * const me);
    static QP::QMState const idleState_s;
    static QP::QState sendingState  (UartController * const me, QP::QEvt const * const e);
    static QP::QState sendingState_e(UartController * const me);
    static QP::QState sendingState_x(UartController * const me);
    static QP::QMState const sendingState_s;
};


}

#endif // BATTERYCONTROLLER_H
