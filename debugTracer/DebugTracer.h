//****************************************************************************
// Model: debugTracer.qm
// File:  ./DebugTracer.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${Tracer::.::DebugTracer.h} ................................................
#ifndef DEBUGTRACER_H
#define DEBUGTRACER_H

#include "qp_port.h"
#include "list.h"
#include "UartController.h"

namespace DT {

enum DebugSignals {
    TRACE_SIG = QP::Q_USER_SIG,
    NEW_BUFFERED_STRING_SIG,
    CHAR_SIG,
    TRANSMITION_COMPLETE_SIG,
    MAX_PUB_SIG
};

class TraceChannelController : public UC::UartController {
public:
    TraceChannelController(QP::QMActive& own) : UC::UartController(own) {};
    virtual ~TraceChannelController() {};
    virtual void onReception(const char& character);
private:
    virtual bool sendData(const char * buff);
    virtual void reconfigure();
};

//${Tracer::DebugTracer} .....................................................
class DebugTracer : public QP::QMActive {
private:
    TraceChannelController tracer;
    const uint32_t traceStringSize;

private:
    DebugTracer();

public:
    ~DebugTracer();
    static DebugTracer& getInstance();
    void trace(const char *__restrict fmt, ... );

protected:
    static QP::QState initial(DebugTracer * const me, QP::QEvt const * const e);
    static QP::QState ActiveState  (DebugTracer * const me, QP::QEvt const * const e);
    static QP::QMState const ActiveState_s;
};


extern DebugTracer& item;

}

#endif // DEBUGTRACER_H
