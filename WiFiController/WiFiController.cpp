//****************************************************************************
// Model: WiFiController.qm
// File:  ./WiFiController.cpp
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${Controller::.::WiFiController.c~} ........................................
#include "qp_port.h"
#include "WiFiController.h"
#include <stdint.h>
#include "BoardSupportPackage.h"
#include "DebugTracer.h"

namespace WiFi {

//${Controller::WiFiController} ..............................................
//${Controller::WiFiController::WiFiController} ..............................
WiFiController::WiFiController()
  : QMActive(Q_STATE_CAST(&WiFiController::initial)){
}

//${Controller::WiFiController::~WiFiController} .............................
WiFiController::~WiFiController() {
    //
}
//${Controller::WiFiController::getInstance} .................................
WiFiController& WiFiController::getInstance() {
    static WiFiController instance;
    return instance;
}
//${Controller::WiFiController::SM} ..........................................
QP::QState WiFiController::initial(WiFiController * const me, QP::QEvt const * const e) {
    static QP::QMTranActTable const tatbl_ = { // transition-action table
        &state1_s,
        {
            Q_ACTION_CAST(0)  // zero terminator
        }
    };
    // ${Controller::WiFiController::SM::initial}
    (void)e; //supress warning
    return QM_TRAN_INIT(&tatbl_);
}
//${Controller::WiFiController::SM::state1} ..................................
QP::QMState const WiFiController::state1_s = {
    static_cast<QP::QMState const *>(0), // superstate (top)
    Q_STATE_CAST(&state1),
    Q_ACTION_CAST(0), // no entry action
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(0)  // no intitial tran.
};
// ${Controller::WiFiController::SM::state1}
QP::QState WiFiController::state1(WiFiController * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    (void)me; /* avoid compiler warning in case 'me' is not used */
    return status_;
}


WiFiController& item = WiFiController::getInstance();

}
