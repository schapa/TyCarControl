//****************************************************************************
// Model: model.qm
// File:  ./BatteryController.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${ActiveObjects::.::BatteryControlle~} .....................................
#ifndef BATTERYCONTROLLER_H
#define BATTERYCONTROLLER_H

#include "qp_port.h"

namespace BC {

enum BatterySignals {
    LOW_BATTERY_SIG = QP::Q_USER_SIG,
    FULL_BATTERY_SIG,
    NEW_BATTERY_VALUE_SIG,
    MAX_PUB_SIG
};

//${ActiveObjects::BatteryControlle~} ........................................
class BatteryController : public QP::QMActive {
private:
    const uint32_t chargedValue;
    const uint32_t dischargedValue;
    uint32_t currentValue;

private:
    BatteryController();

public:
    ~BatteryController();
    uint32_t& getValue();
    uint32_t getPercentage();
    static BatteryController& getInstance();

protected:
    static QP::QState initial(BatteryController * const me, QP::QEvt const * const e);
    static QP::QState commonState  (BatteryController * const me, QP::QEvt const * const e);
    static QP::QState commonState_e(BatteryController * const me);
    static QP::QState commonState_x(BatteryController * const me);
    static QP::QMState const commonState_s;
    static QP::QState IdleState  (BatteryController * const me, QP::QEvt const * const e);
    static QP::QState IdleState_e(BatteryController * const me);
    static QP::QState IdleState_x(BatteryController * const me);
    static QP::QMState const IdleState_s;
    static QP::QState lowBatteryState  (BatteryController * const me, QP::QEvt const * const e);
    static QP::QState lowBatteryState_e(BatteryController * const me);
    static QP::QState lowBatteryState_x(BatteryController * const me);
    static QP::QMState const lowBatteryState_s;
};


extern BatteryController& item;

}

#endif // BATTERYCONTROLLER_H
